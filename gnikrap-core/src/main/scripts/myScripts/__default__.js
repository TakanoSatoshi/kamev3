// Initializationvar leds = ev3.getBrick().getKeyboard().getLed();leds.orange().blink();// Do others initializations// ...leds.green().blink();// Main loopwhile(ev3.isRunning()) {}// Finalization// Bellow is sample code for the API usage/*// Battery APIvar battery = ev3.getBrick().getBattery();ev3.message("Battery current: " + battery.getBatteryCurrent());ev3.message("Motor current: " + battery.getMotorCurrent());ev3.message("Voltage: " + battery.getVoltageMilliVolt());*//*// Sound APIvar sound = ev3.getBrick().getSound();sound.setVolume(90);sound.beep();for(freq = 50; freq < 1500; freq = freq + 10) {    sound.playTone(freq, 0.005);}sound.playNote("Do", 0.5);sound.playNote("Re", 0.5);sound.playNote("Mi", 0.5);sound.playNote("Fa", 0.5);sound.playNote("Sol", 0.5);sound.playNote("La", 0.5);sound.playNote("Si", 0.5);// Dont work - conversion problem - sound.playNote(["Do", "Do", "Do", "Re", "Mi", "Re", "Do", "Mi", "Re", "Re", "Do"], 0,5);*//*// Keyboardvar leds = ev3.getBrick().getKeyboard().getLed();leds.green();ev3.sleep(2);leds.orange().blink();ev3.sleep(2);leds.red().blink().blink();ev3.sleep(2);leds.off();ev3.message("Press enter to continue");var enterKey = ev3.getBrick().getKeyboard().getEnter();while(enterKey.isUp() && ev3.isRunning()) {    ev3.sleep(0.2);}ev3.message("Enter - Down: " + enterKey.isDown() + " / Up: " + enterKey.isUp());*//*// Screenvar screen = ev3.getBrick().getScreen();screen.clear();//screen.setInverted(false);//screen.drawText("X", 0,0);*//*// IR Sensorvar enterKey = ev3.getBrick().getKeyboard().getEnter();var irSensor = ev3.getBrick().getIRSensor("S1");while(enterKey.isUp() && ev3.isRunning()) {    ev3.message("Distance: " + irSensor.getDistance() + " - Enter key to go next");    ev3.sleep(0.2);}while(enterKey.isDown() && ev3.isRunning()); // Wait enter key releasedwhile(enterKey.isUp() && ev3.isRunning()) {    var x = irSensor.seekBeacon();    ev3.message("Beacon found: " + x.isBeaconFound() + ", bearing: " + x.getBearing() + ", distance: " + x.getDistance() + " - Enter key to go next");    ev3.sleep(0.2);}while(enterKey.isDown() && ev3.isRunning()); // Wait enter key releasedwhile(enterKey.isUp() && ev3.isRunning()) {    var x = irSensor.getRemoteCommand();    ev3.message("value: " + x.value() + ", tl: " + x.isTopLeftEnabled() + ", tr: " + x.isTopRightEnabled() + ", bl: " + x.isBottomLeftEnabled() + ", br: " + x.isBottomRightEnabled() + ", bea: " + x.isBeaconEnabled() + " nothing: " + x.noButtonPressed());    ev3.sleep(0.2);}*//*// Touch sensorvar enterKey = ev3.getBrick().getKeyboard().getEnter();var touchSensor = ev3.getBrick().getTouchSensor("S2");while(enterKey.isUp() && ev3.isRunning()) {    ev3.message("Bush button: " + touchSensor.isPushed());    ev3.sleep(0.2);}*//*var enterKey = ev3.getBrick().getKeyboard().getEnter();var colorSensor = ev3.getBrick().getColorSensor("S1");while(enterKey.isUp() && ev3.isRunning()) {    ev3.message("Reflected light: " + colorSensor.getReflectedLight());    ev3.sleep(0.2);}while(enterKey.isDown() && ev3.isRunning()); // Wait enter key releasedwhile(enterKey.isUp() && ev3.isRunning()) {    ev3.message("Ambiant light: " + colorSensor.getAmbientLight());    ev3.sleep(0.2);}while(enterKey.isDown() && ev3.isRunning()); // Wait enter key releasedwhile(enterKey.isUp() && ev3.isRunning()) {    ev3.message("Color: " + colorSensor.getColor());    ev3.sleep(0.2);}while(enterKey.isDown() && ev3.isRunning()); // Wait enter key released*//*// Motorvar largeMotor = ev3.getBrick().getLargeMotor("B");// Rotate and wait end of rotationlargeMotor.rotate(360);largeMotor.setSpeed(100);largeMotor.rotate(-360);// Retrieve tacholargeMotor.rotate(60);ev3.message("TachoA: " + largeMotor.getTachoCount());largeMotor.rotate(-60);ev3.message("TachoB: " + largeMotor.getTachoCount());largeMotor.resetTachoCount();ev3.message("TachoC: " + largeMotor.getTachoCount());// Rotate and don't waitvar tacho;largeMotor.rotate(360 * 3, true);while((tacho = largeMotor.getTachoCount()) < 1000) {    ev3.message("Tacho: " + tacho);    ev3.sleep(0.2);}*/